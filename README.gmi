# GEMINI-RB

Ruby parser and HTML viewer for the Gemini gemtext format.

The parser can be used standalone and simply converts gemtext into blocks and can be used for generating output. Current functionality:

* Parse Gemini gemtext files into a Ruby block structure (as a library and Ruby gem)
* Run a Sinatra web server serving pages from different sources (currently local file system and github http)

The Sinatra based HTML viewer will embed images for viewing and add source code syntax highlighting. It also makes use of some annotations in the file to generate a web-based version of our issue tracker.

## Parse gemtext into blocks

=> ./test/data/test01.gmi Example

will parse into

```
[{:type=>:header, :content=>["# Gemtext cheatsheet"]},
 {:type=>:text, :content=>["Here's the basics of how text works in Gemtext:"]},
 {:type=>:list,
  :content=>
   ["* Long lines get wrapped by the client to fit the screen",
    "* Short lines *don't* get joined together",
    "* Write paragraphs as single long lines",
    "* Blank lines are rendered verbatim"]},
 {:type=>:header, :content=>["## Headings"]},
 {:type=>:text, :content=>["You get three levels of heading:"]},
 {:type=>:verbatim,
  :content=>["# Heading", "", "## Sub-heading", "", "### Sub-subheading"]},
 {:type=>:text,
  :content=>["You get one kind of list and you can't nest them:"]},
 {:type=>:verbatim, :content=>["* Mercury", "* Gemini", "* Apollo"]},
 {:type=>:text, :content=>["Here's a quote from Maciej CegÅ‚owski:"]},
 {:type=>:quote,
  :content=>
   ["> I contend that text-based websites should not exceed in size the major works of Russian literature."]},
 {:type=>:text, :content=>["A multiline quote:"]},
 {:type=>:quote, :content=>["> Line 1", "> Line 2"]},
 {:type=>:text,
  :content=>
   ["Lines which start with ``` will cause clients to toggle in and out of ordinary rendering mode and preformatted mode. In preformatted mode, Gemtext syntax is ignored so links etc. will not be rendered, and text will appear in a monospace font."]},
 {:type=>:text, :content=>["Proxied content from"]},
 {:type=>:uri,
  :content=>["=> gemini://gemini.circumlunar.space/docs/cheatsheet.gmi"]}]
```

For more, see the tests in

=> ./test/parser_test.rb

## Run webserver

This webserver is not a real proxy for gemini. What it does is parse gemtext files and serves them as HTML. Multiple skins are supported (in the spirit of gemini the reader chooses how information is presented).

We run Sinatra with Puma or standalone from a Guix environment

=> .guix-deploy Puma/sinatra setup

Set up a Guix container (after installing GNU Guix)

```
source .guix-deploy
cd web
```

Run Sinatra

```
ruby app.rb -s Puma
```

or

```
puma -t 1 -e development
```

For production simply run puma.

## Paths

We host several sites as git repositories in a gemini directory. This gets accessed by both a gemini server and a web server to present output. One interesting aspect is that layout or 'skin' is part of the URL:

=> http://host/:skin/path

I.e., the first element of the path defines the skin - which ascertains that further navigation retains the skin in a 'monadic' way because all paths are relative.

Examples:

=> one FIXME
=> two FiXME

## License

Code is under the liberal BSD license.

=> LICENSE

## Copyright

Pjotr Prins (C) 2021-2022
